// Copyright 2010-2012 Spraylight GmbH

#ifndef __MURL_GRAPH_I_TOUCHABLE_H__
#define __MURL_GRAPH_I_TOUCHABLE_H__

#include "murl_graph_types.h"
#include "murl_i_enums.h"

namespace Murl
{
    namespace Graph
    {
        /**
         * @ingroup MurlGraphMiscInterfaces
         * @interface ITouchable
         * @brief The ITouchable interface.
         * The ITouchable interface is used for reporting events and
         * the corresponding intersection information of a touch area.
         * Events are generated by multi-touch or any pointing device.
         */
        class ITouchable
        {
        public:
            /**
             * @brief Begin reporting events.
             * @return true if successful.
             */
            virtual Bool ReportBegin() = 0;
            /**
             * @brief End reporting events.
             * @return true if successful.
             */
            virtual Bool ReportEnd() = 0;
            
            /**
             * @brief Report the was-pressed event.
             * @param deviceType The device type.
             * @param id The unique identifier of the event.
             * @param hasUpdate true if the device received new data since the last report.
             * @param localPosition The local position of the event in 3D object space.
             * @param outCoord The 2D output coordinate.
             * @param isInside true if the position is inside the touch area.
             * @return true if successful.
             */
            virtual Bool ReportWasPressed(IEnums::InputDeviceType deviceType, UInt32 id, Bool hasUpdate,
                                          const Vector& localPosition, const Vector& outCoord, Bool isInside) = 0;
            /**
             * @brief Report the is-pressed event.
             * @param deviceType The device type.
             * @param id The unique identifier of the event.
             * @param hasUpdate true if the device received new data since the last report.
             * @param localPosition The local position of the event in 3D object space.
             * @param outCoord The 2D output coordinate.
             * @param isInside true if the position is inside the touch area.
             * @return true if successful.
             */
            virtual Bool ReportIsPressed(IEnums::InputDeviceType deviceType, UInt32 id, Bool hasUpdate,
                                         const Vector& localPosition, const Vector& outCoord, Bool isInside) = 0;
            /**
             * @brief Report the was-released event.
             * @param deviceType The device type.
             * @param id The unique identifier of the event.
             * @param hasUpdate true if the device received new data since the last report.
             * @param localPosition The local position of the event in 3D object space.
             * @param outCoord The 2D output coordinate.
             * @param isInside true if the position is inside the touch area.
             * @return true if successful.
             */
            virtual Bool ReportWasReleased(IEnums::InputDeviceType deviceType, UInt32 id, Bool hasUpdate,
                                           const Vector& localPosition, const Vector& outCoord, Bool isInside) = 0;
            /**
             * @brief Report the was-moved event.
             * @param deviceType The device type.
             * @param id The unique identifier of the event.
             * @param hasUpdate true if the device received new data since the last report.
             * @param localPosition The local position of the event in 3D object space.
             * @param outCoord The 2D output coordinate.
             * @param isInside true if the position is inside the touch area.
             * @return true if successful.
             */
            virtual Bool ReportWasMoved(IEnums::InputDeviceType deviceType, UInt32 id, Bool hasUpdate,
                                        const Vector& localPosition, const Vector& outCoord, Bool isInside) = 0;
            /**
             * @brief Report the was-cancelled event.
             * @param deviceType The device type.
             * @param id The unique identifier of the event.
             * @param localPosition The local position of the event in 3D object space.
             * @param outCoord The 2D output coordinate.
             * @return true if successful.
             */
            virtual Bool ReportWasCancelled(IEnums::InputDeviceType deviceType, UInt32 id,
                                            const Vector& localPosition, const Vector& outCoord) = 0;
            
        protected:
            virtual ~ITouchable() {}
        };
    }
}

#endif // __MURL_GRAPH_I_TOUCHABLE_H__
